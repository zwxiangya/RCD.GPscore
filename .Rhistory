load("/export3/zhangw/RCD_Glioma/RCD.Glio.Sig/selected.gene.pair.for.101.Rdata")
load("/export3/zhangw/RCD_Glioma/RCD.Glio.Sig/final.genes.for.matrix.Rdata")
usethis::use_data(final.candicate.gene)
usethis::use_data(ID.gene.pair)
rm(list = ls())
data("ID.gene.pair")
data("final.candicate.gene.rda")
data("final.candicate.gene")
final.candicate.gene
load("~/R/DATABASE/GBM/tcga_gbm_hiseq.Rdata")
View(exp_tcga_hseq)
GBM.exp.tcga = exp_tcga_hseq[,-1:3]
GBM.exp.tcga = exp_tcga_hseq[,-c(1:3)]
GBM.exp.tcga= apply(GBM.exp.tcga, 2, as.numeric)
GBM.exp.tcga= apply(GBM.exp.tcga, 2, as.numeric) %>% as.data.frame()
library(tidyverse)
GBM.exp.tcga= apply(GBM.exp.tcga, 2, as.numeric) %>% as.data.frame()
GBM.exp.tcga=GBM.exp.tcga[,final.candicate.gene]
View(GBM.exp.tcga)
rownames(GBM.exp.tcga)=rownames(exp_tcga_hseq)
usethis::use_data(GBM.exp.tcga)
rm(list = ls())
#' @author Wei Zhang
#'
#' @return A dataframe that contains the risk score
#'
#' @export
#'
#' @examples
#' \dontrun{
data("data/GBM.exp.tcga.rda")
dd = prediction.OS(exp.matrix = exp_test)
data("data/GBM.exp.tcga.rda")
#' @author Wei Zhang
#'
#' @return A dataframe that contains the risk score
#'
#' @export
#'
#' @examples
#' \dontrun{
data("GBM.exp.tcga")
dd = prediction.OS(exp.matrix = exp_test)
#' @author Wei Zhang
#'
#' @return A dataframe that contains the risk score
#'
#' @export
#'
#' @examples
#' \dontrun{
data("GBM.exp.tcga")
dd = cal.RCD.GP.Sig.RS(exprset = GBM.exp.tcga)
cal.RCD.GP.Sig.RS = function(exprset){
cal.RCD.GP.Sig.RS = function(exprset){
cal.RCD.GP.Sig.RS = function(exprset){
data("ID.gene.pair")
data("final.candicate.gene")
colnames(exprset) = gsub("-",".",colnames(exprset))
## generating the gene pari matrix
IRGP.generator <- function(expr = NULL, immuneGene = NULL) {
imm_mat <- as.data.frame(t(combn(immuneGene, 2, simplify = T))) # Constructing permutations of genes
rownames(imm_mat) <- paste0("P",rownames(imm_mat))
colnames(imm_mat) <- c("IRGP1","IRGP2") # The permutations are categorized as IRGP1 and IRGP2.
IRGP_matrix_1 <- expr[as.character(imm_mat$IRGP1),] #
IRGP_matrix_2 <- expr[as.character(imm_mat$IRGP2),]
IRGP_matrix <- IRGP_matrix_1 - IRGP_matrix_2
for( p in 1:ncol(IRGP_matrix)){
IRGP_matrix[,p] <- ifelse(IRGP_matrix[,p] < 0,1,0) #
}
rownames(IRGP_matrix) <- rownames(imm_mat)
return(list(IRGP_matrix = IRGP_matrix, IRGP_info = imm_mat))
}
if(length(unique( final.candicate.gene%in%colnames(exprset)))==1){
tmp.IRPG = IRGP.generator(expr = as.data.frame(t(exprset)), #
immuneGene = final.candicate.gene)
} else {
gene.not.in = final.candicate.gene[which(!final.candicate.gene%in%colnames(exprset))]
not.matrix = matrix(data= rep(0,length(gene.not.in)*nrow(exprset)), nrow =nrow(exprset),ncol =length(gene.not.in)  )
not.matrix =as.data.frame(not.matrix)
colnames(not.matrix) = gene.not.in
exprset = cbind(exprset,not.matrix)
tmp.IRPG = IRGP.generator(expr = as.data.frame(t(exprset)), #
immuneGene = final.candicate.gene)
}
tmp.IRPG.matrix =  tmp.IRPG$IRGP_matrix
tmp.IRPG.info =  tmp.IRPG$IRGP_info
tmp.IRPG.matrix.RS = tmp.IRPG.matrix[ID.gene.pair,]
riskscore = data.frame(ID= colnames(tmp.IRPG.matrix.RS),
Riskscore = apply(tmp.IRPG.matrix.RS, 2, sum))
return(riskscore)
}
cal.RCD.GP.Sig.RS = function(exprset){
data("ID.gene.pair")
data("final.candicate.gene")
colnames(exprset) = gsub("-",".",colnames(exprset))
## generating the gene pari matrix
IRGP.generator <- function(expr = NULL, immuneGene = NULL) {
imm_mat <- as.data.frame(t(combn(immuneGene, 2, simplify = T))) # Constructing permutations of genes
rownames(imm_mat) <- paste0("P",rownames(imm_mat))
colnames(imm_mat) <- c("IRGP1","IRGP2") # The permutations are categorized as IRGP1 and IRGP2.
IRGP_matrix_1 <- expr[as.character(imm_mat$IRGP1),] #
IRGP_matrix_2 <- expr[as.character(imm_mat$IRGP2),]
IRGP_matrix <- IRGP_matrix_1 - IRGP_matrix_2
for( p in 1:ncol(IRGP_matrix)){
IRGP_matrix[,p] <- ifelse(IRGP_matrix[,p] < 0,1,0) #
}
rownames(IRGP_matrix) <- rownames(imm_mat)
return(list(IRGP_matrix = IRGP_matrix, IRGP_info = imm_mat))
}
if(length(unique( final.candicate.gene%in%colnames(exprset)))==1){
tmp.IRPG = IRGP.generator(expr = as.data.frame(t(exprset)), #
immuneGene = final.candicate.gene)
} else {
gene.not.in = final.candicate.gene[which(!final.candicate.gene%in%colnames(exprset))]
not.matrix = matrix(data= rep(0,length(gene.not.in)*nrow(exprset)), nrow =nrow(exprset),ncol =length(gene.not.in)  )
not.matrix =as.data.frame(not.matrix)
colnames(not.matrix) = gene.not.in
exprset = cbind(exprset,not.matrix)
tmp.IRPG = IRGP.generator(expr = as.data.frame(t(exprset)), #
immuneGene = final.candicate.gene)
}
tmp.IRPG.matrix =  tmp.IRPG$IRGP_matrix
tmp.IRPG.info =  tmp.IRPG$IRGP_info
tmp.IRPG.matrix.RS = tmp.IRPG.matrix[ID.gene.pair,]
riskscore = data.frame(ID= colnames(tmp.IRPG.matrix.RS),
Riskscore = apply(tmp.IRPG.matrix.RS, 2, sum))
return(riskscore)
}
#' @author Wei Zhang
#'
#' @return A dataframe that contains the risk score
#'
#' @export
#'
#' @examples
#' \dontrun{
data("GBM.exp.tcga")
dd = cal.RCD.GP.Sig.RS(exprset = GBM.exp.tcga)
#' }
cal.RCD.GP.Sig.RS = function(exprset){
data("ID.gene.pair")
data("final.candicate.gene")
colnames(exprset) = gsub("-",".",colnames(exprset))
## generating the gene pari matrix
IRGP.generator <- function(expr = NULL, immuneGene = NULL) {
imm_mat <- as.data.frame(t(combn(immuneGene, 2, simplify = T))) # Constructing permutations of genes
rownames(imm_mat) <- paste0("P",rownames(imm_mat))
colnames(imm_mat) <- c("IRGP1","IRGP2") # The permutations are categorized as IRGP1 and IRGP2.
IRGP_matrix_1 <- expr[as.character(imm_mat$IRGP1),] #
IRGP_matrix_2 <- expr[as.character(imm_mat$IRGP2),]
IRGP_matrix <- IRGP_matrix_1 - IRGP_matrix_2
for( p in 1:ncol(IRGP_matrix)){
IRGP_matrix[,p] <- ifelse(IRGP_matrix[,p] < 0,1,0) #
}
rownames(IRGP_matrix) <- rownames(imm_mat)
return(list(IRGP_matrix = IRGP_matrix, IRGP_info = imm_mat))
}
if(length(unique( final.candicate.gene%in%colnames(exprset)))==1){
tmp.IRPG = IRGP.generator(expr = as.data.frame(t(exprset)), #
immuneGene = final.candicate.gene)
} else {
gene.not.in = final.candicate.gene[which(!final.candicate.gene%in%colnames(exprset))]
not.matrix = matrix(data= rep(0,length(gene.not.in)*nrow(exprset)), nrow =nrow(exprset),ncol =length(gene.not.in)  )
not.matrix =as.data.frame(not.matrix)
colnames(not.matrix) = gene.not.in
exprset = cbind(exprset,not.matrix)
tmp.IRPG = IRGP.generator(expr = as.data.frame(t(exprset)), #
immuneGene = final.candicate.gene)
}
tmp.IRPG.matrix =  tmp.IRPG$IRGP_matrix
tmp.IRPG.info =  tmp.IRPG$IRGP_info
tmp.IRPG.matrix.RS = tmp.IRPG.matrix[ID.gene.pair,]
riskscore = data.frame(ID= colnames(tmp.IRPG.matrix.RS),
Riskscore = apply(tmp.IRPG.matrix.RS, 2, sum))
return(riskscore)
}
View(dd)
usethis::use_mit_license()
usethis::use_package("dplyr", type = "Imports",
min_version = "1.0")
devtools::check()
devtools::check()
devtools::check()
devtools::check()
cal.RCD.GP.Sig.RS = function(exprset){
if(T){
data("ID.gene.pair")
data("final.candicate.gene")
}
colnames(exprset) = gsub("-",".",colnames(exprset))
## generating the gene pari matrix
IRGP.generator <- function(expr = NULL, immuneGene = NULL) {
imm_mat <- as.data.frame(t(combn(immuneGene, 2, simplify = T))) # Constructing permutations of genes
rownames(imm_mat) <- paste0("P",rownames(imm_mat))
colnames(imm_mat) <- c("IRGP1","IRGP2") # The permutations are categorized as IRGP1 and IRGP2.
IRGP_matrix_1 <- expr[as.character(imm_mat$IRGP1),] #
IRGP_matrix_2 <- expr[as.character(imm_mat$IRGP2),]
IRGP_matrix <- IRGP_matrix_1 - IRGP_matrix_2
for( p in 1:ncol(IRGP_matrix)){
IRGP_matrix[,p] <- ifelse(IRGP_matrix[,p] < 0,1,0) #
}
rownames(IRGP_matrix) <- rownames(imm_mat)
return(list(IRGP_matrix = IRGP_matrix, IRGP_info = imm_mat))
}
if(length(unique( final.candicate.gene%in%colnames(exprset)))==1){
tmp.IRPG = IRGP.generator(expr = as.data.frame(t(exprset)), #
immuneGene = final.candicate.gene)
} else {
gene.not.in = final.candicate.gene[which(!final.candicate.gene%in%colnames(exprset))]
not.matrix = matrix(data= rep(0,length(gene.not.in)*nrow(exprset)), nrow =nrow(exprset),ncol =length(gene.not.in)  )
not.matrix =as.data.frame(not.matrix)
colnames(not.matrix) = gene.not.in
exprset = cbind(exprset,not.matrix)
tmp.IRPG = IRGP.generator(expr = as.data.frame(t(exprset)), #
immuneGene = final.candicate.gene)
}
tmp.IRPG.matrix =  tmp.IRPG$IRGP_matrix
tmp.IRPG.info =  tmp.IRPG$IRGP_info
tmp.IRPG.matrix.RS = tmp.IRPG.matrix[ID.gene.pair,]
riskscore = data.frame(ID= colnames(tmp.IRPG.matrix.RS),
Riskscore = apply(tmp.IRPG.matrix.RS, 2, sum))
return(riskscore)
}
devtools::check()
devtools::document()
devtools::load_all()
devtools::document()
devtools::check()
devtools::document()
devtools::check()
library(RCD.GPscore)
library(RCD.GPscore)
library(RCD.GPscore)
devtools::document()
library(RCD.GPscore)
install.packages("~/R/ZW/cellDeath/RCD.Glioma/RCD.GPscore_0.1.0.tar.gz", repos = NULL, type = "source")
RCD.GPscore::cal.RCD.GP.Sig.RS()
library(RCD.GPscore)
usethis::use_mit_license()
devtools::check()
